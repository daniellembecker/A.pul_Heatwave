new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_sym_bio <- rbind(letters_data_sym_bio, new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_sym_bio <- master %>%
filter(!is.na(Sym_AFDW.mg.cm2)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, formatted_date, treatment, Sym_AFDW.mg.cm2) %>%
left_join(letters_data_sym_bio, by = "timepoint")
#remove outlier chla.ug cm2 for plot from TP3, TP5
plot_data_sym_bio <- plot_data_sym_bio %>%
filter(Sym_AFDW.mg.cm2 < 1.6)
# Define the specific timepoint
specific_timepoint <- "TP5"
# Define the chlc2.ug.cm2 threshold for outlier detection
threshold <- 1.3
# Filter the data to remove the outlier point at timepoint 5
plot_data_sym_bio <- plot_data_sym_bio %>%
filter(!(timepoint == specific_timepoint & Sym_AFDW.mg.cm2 > threshold))
# Summarize the CLD data to get one letter per timepoint
cld_summary_sym_bio <- plot_data_sym_bio %>%
group_by(timepoint, formatted_date, treatment) %>%
summarise(.group = first(.group), max_y = max(Sym_AFDW.mg.cm2)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_sym_bio <- as.data.frame(cld_summary_sym_bio)
#create plot
sym.bio <- ggplot(plot_data_sym_bio, aes(x = formatted_date, y = Sym_AFDW.mg.cm2, fill = treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
geom_text(data = cld_summary_sym_bio, aes(x = formatted_date, y = max_y + 0.08 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
scale_fill_manual(values = c("darkblue", "red", "gray"), labels=c("ambient", "hot", "initial"))+
labs(fill = "Treatment") +
xlab("Timepoint") +
ylab(expression(bold(paste("Symbiont Tissue Biomass (mg cm"^-2, ") "))))+
theme_classic() +
theme(
legend.title=element_text(face="bold", size=20),
legend.text=element_text(size=20),
legend.position = "none",
axis.title=element_text(face="bold", size=30),
axis.text=element_text(size=30, color="black"),
strip.text.x=element_text(face="italic", size=20)
); sym.bio
# Chunk 36
# Extract relevant columns from the compact letter display for post hoc data
letters_data_host_bio <- letters_data_host_bio_og %>%
select(timepoint, .group)
# Create a new row for TP1
new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_host_bio <- rbind(letters_data_host_bio, new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_host_bio <- master %>%
filter(!is.na(Host_AFDW.mg.cm2)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, formatted_date, treatment, Host_AFDW.mg.cm2) %>%
left_join(letters_data_host_bio, by = "timepoint")
#remove outlier chla.ug cm2 for plot from TP3, TP5
plot_data_host_bio <- plot_data_host_bio %>%
filter(Host_AFDW.mg.cm2 < 3.4)
# Summarize the CLD data to get one letter per timepoint
cld_summary_host_bio <- plot_data_host_bio %>%
group_by(timepoint, formatted_date, treatment) %>%
summarise(.group = first(.group), max_y = max(Host_AFDW.mg.cm2)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_host_bio <- as.data.frame(cld_summary_host_bio)
#create plot
host.bio <- ggplot(plot_data_host_bio, aes(x = formatted_date, y = Host_AFDW.mg.cm2, fill = treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
geom_text(data = cld_summary_host_bio, aes(x = formatted_date, y = max_y + 0.01 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
scale_fill_manual(values = c("darkblue", "red", "gray"), labels=c("ambient", "hot", "initial"))+
labs(fill = "Treatment") +
xlab("Timepoint") +
ylab(expression(bold(paste("Host Tissue Biomass (mg cm"^-2, ")"))))+
theme_classic() +
theme(
legend.title=element_text(face="bold", size=20),
legend.text=element_text(size=20),
legend.position = "none",
axis.title=element_text(face="bold", size=30),
axis.text=element_text(size=30, color="black"),
strip.text.x=element_text(face="italic", size=20)
); host.bio
# Chunk 37
# Run photographic bleaching script to put Blch_plot2 in with other phys data
render("../../RAnalysis/scripts/Photographic_Bleaching.Rmd")
# Blch_plot2 is now in our environment and can be used in figure
Blch_plot2
# Chunk 38
phys_figure<-plot_grid(Blch_plot2, symbplot_cm2, tot_chl, sym.bio, host.bio, host_prot_cm2, holobiont_prot_cm2, ncol=3, nrow=3, labels = c('A', 'B', 'C', 'D', 'E', 'F', 'G'), rel_heights= c(1,1,1,1), rel_widths = c(1,1,1,1.2), label_y=1, align="h", label_size = 50)
ggsave(filename="timeseries_analysis/Figures/Phys_Figure.png", plot=phys_figure, dpi=300, width=30, height=30, units="in")
ggsave(filename="timeseries_analysis/Figures/Phys_Figure.pdf", plot=phys_figure, dpi=300, width=30, height=30, units="in")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# Chunk 2
## install packages if you dont already have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("RColorBrewer")) install.packages("RColorBrewer")
if (!require("lme4")) install.packages("lme4")
if (!require("lmerTest")) install.packages("lmerTest")
if (!require("car")) install.packages("car")
if (!require("effects")) install.packages("effects")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("cowplot")) install.packages("cowplot")
if (!require("vegan")) install.packages("vegan")
if (!require("corrr")) install.packages("corrr")
if (!require("ggcorrplot")) install.packages("ggcorrplot")
if (!require("GGally")) install.packages("GGally")
if (!require("broom")) install.packages("broom")
if (!require("cowplot")) install.packages("cowplot")
if (!require("emmeans")) install.packages("emmeans")
# load packages
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(car)
library(effects)
library(ggfortify)
library(cowplot)
library(vegan)
library(corrr)
library(ggcorrplot)
library(multcompView)
library(GGally)
library(broom)
library(patchwork)
library(cowplot)
library(emmeans)
# Chunk 3
PR_files <- list.files("../", pattern = "PR_rates.csv", recursive=T, full.names=T)
# Chunk 4
#PR rates
PR_dataset <- data.frame() #make dataframe
PR_dataset <- PR_dataset[-c(1)] #remove first X column
for (i in 1:length(PR_files)){
PR_df <- read.csv(PR_files[i]) #each file will be read in
PR_dataset <- rbind(PR_dataset, PR_df) #for each iteration, bind the new data to the building dataset
}
#provide context for Rd and P responses by light levels in data
PR_dataset <- PR_dataset %>%
mutate(Assay = case_when(
Light_Value == "0" ~ "Rd",
Light_Value == "655" ~ "P",
Light_Value == "657" ~ "P",
Light_Value == "610" ~ "P",
Light_Value == "625" ~ "P",
Light_Value == "615" ~ "P",
Light_Value == "656" ~ "P",
Light_Value == "643" ~ "P",
Light_Value == "651" ~ "P",
Light_Value == "641" ~ "P",
Light_Value == "649" ~ "P",
Light_Value == "654" ~ "P",
Light_Value == "655" ~ "P",
Light_Value == "621" ~ "P",
Light_Value == "614" ~ "P",
Light_Value == "630" ~ "P",
Light_Value == "654" ~ "P",
Light_Value == "645" ~ "P",
Light_Value == "650" ~ "P",
Light_Value == "657" ~ "P",
Light_Value == "658" ~ "P",
Light_Value == "631" ~ "P",
Light_Value == "649" ~ "P",
Light_Value == "655" ~ "P"))
# Chunk 5
#remove files that are not needed from loops
rm(list = ls(pattern = "*_df"))
# Chunk 6
#Load tag metadata sheet
tags <- read.csv("fragment_ metadata.csv")
# Chunk 7
# change from long to wide data format
data.org <- PR_dataset %>%
pivot_wider(names_from = Assay, values_from = micromol.cm2.h)
#remove first X column
data.org <- data.org[-c(1)]
#remove date column to remove NAs later
data.org <- data.org[, -6]
#Summarize all response values by group (fragment ID + timepoint + Treatment).
summary_fragments <- group_by(data.org, fragment_ID, timepoint, Treatment) %>%
summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
drop_na("timepoint")%>%
write_csv(., "timeseries_analysis/Output/summary_respo_fragment_ID.csv")
# Add in tank.num metadata
summary_fragments <- left_join(summary_fragments, tags)
#remove notes column
summary_fragments <- summary_fragments[, -17]
#make respiration positive
summary_fragments$Rd <- -summary_fragments$Rd
#make new column for gross photosynthesis and add net photosynthesis (the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration) + the absolute value of Rd for gross photosynthesis - the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration
summary_fragments$GP <- summary_fragments$P + summary_fragments$Rd
#Calculate a P:R ratio = gross photosynthesis / respiration and make new column. A 1:1 ratio indicates that photosynthesis meets respiratory demand.
summary_fragments$GP.R <- abs(summary_fragments$GP)/abs(summary_fragments$Rd)
#calculate ratio with absolute values
#remove outliers detected by values of P:R ratio data
# Mapping of timepoints to corresponding dates
summary_fragments <- summary_fragments %>%
mutate(formatted_date = case_when(
timepoint == "TP1" ~ "03/19",
timepoint == "TP2" ~ "03/26",
timepoint == "TP3" ~ "03/31",
timepoint == "TP4" ~ "04/10",
timepoint == "TP5" ~ "04/18",
TRUE ~ as.character(timepoint)  # Keep original date for other cases if needed
))
#summarize data for each timepoint
complete_sum <-summary_fragments%>%
group_by(Treatment, timepoint)%>%
summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
drop_na("timepoint")
#remove columns with no data
complete_sum <- complete_sum[, -c(3, 10:13, 15)] %>%
write_csv(., "timeseries_analysis/Output/summary_respo_timepoint.csv")
# Chunk 8
summary_fragments.filtered <- summary_fragments %>%
filter(!is.na(treatment) & treatment != "initial")
# Chunk 9
P_model<-lmer(P~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(P_model))
# Chunk 10
P_model<-lmer(log(P)~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(P_model))
# Chunk 11
anova(P_model, type="III")
summary(P_model)
# run post hoc on timepoints and treatment
emm_P <-emmeans(P_model, ~ timepoint)
pairs(emm_P)
# Generate letter-based groupings
cld_result_P <- multcomp::cld(emm_P, Letters = letters)
letters_data_P_og <- as.data.frame(cld_result_P)
# Calculate means per treatment to calculate percent change
means_per_treatment <- summary_fragments.filtered  %>%
group_by(treatment) %>%
summarise(mean_p = mean(P))
means_per_treatment
# Chunk 12
rd_model<-lmer(Rd~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(rd_model))
# Chunk 13
rd_model<-lmer(log(Rd)~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(rd_model))
# Chunk 14
anova(rd_model, type="III")
# run post hoc on timepoints and treatment
emm_rd <-emmeans(rd_model, ~ timepoint)
pairs(emm_rd)
# Generate letter-based groupings
cld_result_rd <- multcomp::cld(emm_rd, Letters = letters)
letters_data_rd_og <- as.data.frame(cld_result_rd)
# Calculate means per treatment to calculate percent change
means_per_treatment <- summary_fragments.filtered %>%
group_by(treatment) %>%
summarise(mean_R = mean(Rd))
means_per_treatment
# Chunk 15
GP_model<-lmer(GP~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(GP_model))
# Chunk 16
GP_model<-lmer(log(GP)~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(GP_model))
# Chunk 17
anova(GP_model, type="III")
summary(GP_model)
# run post hoc on timepoints and treatment
emm_GP <-emmeans(GP_model, ~ timepoint)
pairs(emm_GP)
# Generate letter-based groupings
cld_result_GP <- multcomp::cld(emm_GP, Letters = letters)
letters_data_GP_og <- as.data.frame(cld_result_GP)
# Calculate means per treatment to calculate percent change
means_per_treatment <- summary_fragments.filtered %>%
group_by(treatment) %>%
summarise(mean_GP = mean(GP))
means_per_treatment
# Chunk 18
GP.R_model<-lmer(GP.R~timepoint*Treatment+(1|colony_ID), na.action=na.omit, data=summary_fragments.filtered )
qqPlot(residuals(GP.R_model))
# Chunk 19
anova(GP.R_model, type="III")
# run post hoc on timepoints
emm_GPR<-emmeans(GP.R_model, ~ timepoint)
pairs(emm_GPR)
# Generate letter-based groupings
cld_result_GPR <- multcomp::cld(emm_GPR, Letters = letters)
letters_data_GPR_og <- as.data.frame(cld_result_GPR)
# Chunk 20
# Extract relevant columns from the compact letter display for post hoc data
letters_data_NP <- letters_data_P_og %>%
select(timepoint, .group)
# Create a new row for TP1
new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_NP <- rbind(letters_data_NP, new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_NP <- summary_fragments %>%
filter(!is.na(P)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, Treatment, P, formatted_date) %>%
left_join(letters_data_NP, by = "timepoint")
# check for and remove NP outliers
NP_clean <- plot_data_NP %>%
filter(P < 0.80) %>% filter(P > 0)
# Summarize the CLD data to get one letter per timepoint
cld_summary_NP <- NP_clean %>%
group_by(timepoint, formatted_date, Treatment) %>%
summarise(.group = first(.group), max_y = max(P)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_NP <- as.data.frame(cld_summary_NP)
#make NP plot
NP_plot <- ggplot(NP_clean, aes(x = formatted_date, y = P, fill = Treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
xlab("Timepoint") +
geom_text(data = cld_summary_NP, aes(x = formatted_date, y = max_y + 0.05 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
ylim(0,1) +
ylab(expression(bold(paste("Net P (" *mu*"mol ", O[2] ," " *cm^-2 *hr^-1*")"))))+
scale_fill_manual(values = c("darkblue", "red", "gray")) + #change gradient color
theme_classic() +
theme(
legend.position = c(0.9, 0.85),
legend.title=element_text(face="bold", size=40),
legend.text=element_text(size=40),
axis.title=element_text(face="bold", size=40),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)
); NP_plot
# Chunk 21
# Extract relevant columns from the compact letter display for post hoc data
letters_data_RD <- letters_data_rd_og %>%
select(timepoint, .group)
# Create a new row for TP1
new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_RD <- rbind(letters_data_RD, new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_RD <- summary_fragments %>%
filter(!is.na(Rd)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, Treatment, Rd, formatted_date) %>%
left_join(letters_data_RD, by = "timepoint")
#check for and remove Rd outliers
Rd_clean <- plot_data_RD %>%
filter(Rd < 0.97) %>%
filter(Rd > 0.0)
# Summarize the CLD data to get one letter per timepoint
cld_summary_RD <- Rd_clean %>%
group_by(timepoint, formatted_date, Treatment) %>%
summarise(.group = first(.group), max_y = max(Rd)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_RD <- as.data.frame(cld_summary_RD)
#make Rd plot
Rd_plot <- ggplot(Rd_clean, aes(x = formatted_date, y = Rd, fill = Treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
xlab("Timepoint") +
geom_text(data = cld_summary_RD, aes(x = formatted_date, y = max_y + 0.05 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
ylab(expression(bold(paste("Respiration Rate (" *mu*"mol ", O[2] ," " *cm^-2 *h^-1*")"))))+
scale_fill_manual(values = c("darkblue", "red", "gray")) + #change gradient color
theme_classic() +
theme(
legend.position="none",
legend.title=element_text(face="bold", size=40),
legend.text=element_text(size=40),
axis.title=element_text(face="bold", size=40),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)
); Rd_plot
# Chunk 22
# Extract relevant columns from the compact letter display for post hoc data
letters_data_GP <- letters_data_GP_og %>%
select(timepoint, .group)
# Create a new row for TP1
new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_GP <- rbind(letters_data_GP, new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_GP <- summary_fragments %>%
filter(!is.na(GP)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, Treatment, GP, formatted_date) %>%
left_join(letters_data_GP, by = "timepoint")
#check for and remove GP outliers
GP_clean <- plot_data_GP %>%
filter(GP < 2.0) %>%
filter(GP > 0.3)
# Summarize the CLD data to get one letter per timepoint
cld_summary_GP <- GP_clean  %>%
group_by(timepoint, formatted_date, Treatment) %>%
summarise(.group = first(.group), max_y = max(GP)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_GP <- as.data.frame(cld_summary_GP)
#make GP plot
GP_plot <- ggplot(GP_clean, aes(x = formatted_date, y = GP, fill = Treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
xlab("Timepoint") +
geom_text(data = cld_summary_GP, aes(x = formatted_date, y = max_y + 0.05 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
ylab(expression(bold(paste("Gross Photosynthetic Rate (" *mu*"mol ", O[2] ," " *cm^-2 *h^-1*")"))))+
scale_fill_manual(values = c("darkblue", "red", "gray")) + #change gradient color
theme_classic() +
theme(
legend.position="none",
legend.title=element_text(face="bold", size=40),
legend.text=element_text(size=40),
axis.title=element_text(face="bold", size=40),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)
); GP_plot
# Chunk 23
# Extract relevant columns from the compact letter display for post hoc data
letters_data_GP_R <- letters_data_GPR_og %>%
select(timepoint, .group)
# Create a new row for TP1
new_row <- data.frame(
timepoint = "TP1",
.group = "na"
)
# Append the new row to the dataframe
letters_data_GPR <- rbind(letters_data_GP_R , new_row)
# Prepare your plotting data by filtering and merging with the letters_data_sym
plot_data_GPR <- summary_fragments %>%
filter(!is.na(GP.R)) %>%
filter(!is.na(timepoint)) %>%
select(fragment_ID, timepoint, Treatment, GP.R, formatted_date) %>%
left_join(letters_data_GPR, by = "timepoint")
# Summarize the CLD data to get one letter per timepoint
cld_summary_GPR <- plot_data_GPR  %>%
group_by(timepoint, formatted_date, Treatment) %>%
summarise(.group = first(.group), max_y = max(GP.R)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_GPR <- as.data.frame(cld_summary_GPR)
#make GP:R plot
GP_R_plot <- ggplot(plot_data_GPR, aes(x = formatted_date, y = GP.R, fill = Treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
xlab("Timepoint") +
geom_text(data = cld_summary_GPR, aes(x = formatted_date, y = max_y + 0.05 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
ylab(expression(bold(paste("GP:R (" *mu*"mol ", O[2] ," " *cm^-2 *h^-1*")"))))+
scale_fill_manual(values = c("darkblue", "red", "gray")) + #change gradient color
theme_classic() +
theme(
legend.position="none",
legend.title=element_text(face="bold", size=40),
legend.text=element_text(size=40),
axis.title=element_text(face="bold", size=40),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)
); GP_R_plot
# Chunk 24
all_resp_Figure<-plot_grid(NP_plot, Rd_plot, GP_plot, GP_R_plot, ncol=2, nrow=2, labels = c('A', 'B', 'C', 'D'),rel_heights= c(1,1,1,1), rel_widths = c(1,1,1,1), label_y=1, align="h", label_size = 50)
ggsave(filename="timeseries_analysis/Figures/all_resp_figure.pdf", plot=all_resp_Figure, dpi=500, width=30, height=30, units="in")
ggsave(filename="timeseries_analysis/Figures/all_resp_figure.png", plot=all_resp_Figure, dpi=500, width=30, height=30, units="in")
# Chunk 25
NP_Rd <-plot_grid(NP_plot, Rd_plot, ncol=2, nrow=1, labels = c('A', 'B'), label_size = 60)
ggsave(filename="timeseries_analysis/Figures/NP_Rd_Figure.png", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
ggsave(filename="timeseries_analysis/Figures/NP_Rd_Figure.pdf", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
View(GP_clean)
#check for and remove GP outliers
GP_clean <- plot_data_GP %>%
filter(GP < 1.45) %>%
filter(GP > 0.3)
# Summarize the CLD data to get one letter per timepoint
cld_summary_GP <- GP_clean  %>%
group_by(timepoint, formatted_date, Treatment) %>%
summarise(.group = first(.group), max_y = max(GP)) %>%
distinct(timepoint, .keep_all = TRUE)  # Keep only one row per timepoint
# Remove any additional attributes (if any) while keeping it a dataframe
cld_summary_GP <- as.data.frame(cld_summary_GP)
#make GP plot
GP_plot <- ggplot(GP_clean, aes(x = formatted_date, y = GP, fill = Treatment)) +
geom_boxplot(outlier.size = 0) +
geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) +
xlab("Timepoint") +
geom_text(data = cld_summary_GP, aes(x = formatted_date, y = max_y + 0.05 * max_y, label = .group), size = 8, vjust = -0.5,fontface = "bold") + # Add letters
ylab(expression(bold(paste("Gross Photosynthetic Rate (" *mu*"mol ", O[2] ," " *cm^-2 *h^-1*")"))))+
scale_fill_manual(values = c("darkblue", "red", "gray")) + #change gradient color
theme_classic() +
theme(
legend.position="none",
legend.title=element_text(face="bold", size=40),
legend.text=element_text(size=40),
axis.title=element_text(face="bold", size=40),
axis.text=element_text(size=40, color="black"),
strip.text.x=element_text(face="italic", size=40)
); GP_plot
