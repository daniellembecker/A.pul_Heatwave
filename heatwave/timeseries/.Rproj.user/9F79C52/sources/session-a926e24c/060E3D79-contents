---
title: "Integrating Heatwave time series biological data"
author: "Ariana S Huffmyer, E5 RoL Team"
edited by: "DM Becker-Polinski"
date: "20220830"
output: html_document
editor_options: 
  chunk_output_type: console
--- 
NOTE: If you want to run this script, do not Knit, instead "run all chunks below" and look at console output.

## Script to run all physiological and biological data used for the heatwave timeseries. https://github.com/daniellembecker/Gametogenesis/tree/main/heatwave/timeseries
 
# Set Up    
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

```{r}
## install packages if you dont already have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("RColorBrewer")) install.packages("RColorBrewer")
if (!require("lme4")) install.packages("lme4")
if (!require("lmerTest")) install.packages("lmerTest")
if (!require("car")) install.packages("car")
if (!require("effects")) install.packages("effects")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("cowplot")) install.packages("cowplot")
if (!require("vegan")) install.packages("vegan")
if (!require("corrr")) install.packages("corrr")
if (!require("ggcorrplot")) install.packages("ggcorrplot")
if (!require("GGally")) install.packages("GGally")
if (!require("broom")) install.packages("broom")
if (!require("cowplot")) install.packages("cowplot")

# load packages
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(car)
library(effects)
library(ggfortify)
library(cowplot)
library(vegan)
library(corrr)
library(ggcorrplot)
library(GGally)
library(broom)
library(patchwork)
library(cowplot)

```
 
# Load and manipulate data for photosynthesis and respiration measurements from heatwave

## Loading data files for PR rates   

Load all .csv files from output of all timepoints for each biological response     
 
```{r}
PR_files <- list.files("../", pattern = "PR_rates.csv", recursive=T, full.names=T)

```
 
## Read data files 
 
Load all data frames.  

```{r}
#PR rates
PR_dataset <- data.frame() #make dataframe
PR_dataset <- PR_dataset[-c(1)] #remove first X column

for (i in 1:length(PR_files)){
  PR_df <- read.csv(PR_files[i]) #each file will be read in
  PR_dataset <- rbind(PR_dataset, PR_df) #for each iteration, bind the new data to the building dataset
}

#provide context for Rd and P responses by light levels in data 
PR_dataset <- PR_dataset %>% 
  mutate(Assay = case_when(
    Light_Value == "0" ~ "Rd",
    Light_Value == "655" ~ "P",
    Light_Value == "657" ~ "P",
    Light_Value == "610" ~ "P",
    Light_Value == "625" ~ "P",
    Light_Value == "615" ~ "P",
    Light_Value == "656" ~ "P",
    Light_Value == "643" ~ "P",
    Light_Value == "651" ~ "P",
    Light_Value == "641" ~ "P",
    Light_Value == "649" ~ "P", 
    Light_Value == "654" ~ "P",
    Light_Value == "655" ~ "P",
    Light_Value == "621" ~ "P",
    Light_Value == "614" ~ "P",
    Light_Value == "630" ~ "P",
    Light_Value == "654" ~ "P", 
    Light_Value == "645" ~ "P",
    Light_Value == "650" ~ "P",
    Light_Value == "657" ~ "P",
    Light_Value == "658" ~ "P",
    Light_Value == "631" ~ "P",
    Light_Value == "649" ~ "P",
    Light_Value == "655" ~ "P"))

```

```{r}
#remove files that are not needed from loops
rm(list = ls(pattern = "*_df"))
```

## Generate master data frame    

Read in tag metadata frame. 
```{r}
#Load tag metadata sheet 
tags <- read.csv("fragment_ metadata.csv")
```


# Organize data frame for  

```{r}
# change from long to wide data format
data.org <- PR_dataset %>%
  pivot_wider(names_from = Assay, values_from = micromol.cm2.h)

#remove first X column
data.org <- data.org[-c(1)] 

#remove date column to remove NAs later
data.org <- data.org[, -6]  

#Summarize all response values by group (fragment ID + timepoint + Treatment).
summary_fragments <- group_by(data.org, fragment_ID, timepoint, Treatment) %>%
  summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
  drop_na("timepoint")%>%
  write_csv(., "timeseries_analysis/Output/summary_respo_fragment_ID.csv")

# Add in tank.num metadata 
summary_fragments <- left_join(summary_fragments, tags)

#remove notes column
summary_fragments <- summary_fragments[, -17]  

#make respiration positive 
summary_fragments$Rd <- -summary_fragments$Rd

#make new column for gross photosynthesis and add net photosynthesis (the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration) + the absolute value of Rd for gross photosynthesis - the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration
summary_fragments$GP <- summary_fragments$P + summary_fragments$Rd

#Calculate a P:R ratio = gross photosynthesis / respiration and make new column. A 1:1 ratio indicates that photosynthesis meets respiratory demand.    
summary_fragments$GP.R <- abs(summary_fragments$GP)/abs(summary_fragments$Rd)
#calculate ratio with absolute values
#remove outliers detected by values of P:R ratio data

#summarize data for each timepoint
complete_sum <-summary_fragments%>%
  group_by(Treatment, timepoint)%>%
  summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
  drop_na("timepoint")

#remove columns with no data
complete_sum <- complete_sum[, -c(3, 10:13, 15)] %>%
  write_csv(., "timeseries_analysis/Output/summary_respo_timepoint.csv")

# check for and remove NP outliers
NP_clean <- summary_fragments %>%
  filter(P < 0.80)

#make NP plot
NP_plot <- NP_clean %>%
  filter(!is.na(P)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd) %>%
  ggplot(., aes(x = timepoint, y = P, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
ylab(expression(bold(paste("Net P (" *mu*"mol ", O[2] ," " *cm^-2 *hr^-1*")"))))+
scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); NP_plot

#check for and remove Rd outliers
Rd_clean <- summary_fragments %>%
  filter(Rd < 0.97)

Rd_clean <- Rd_clean %>%
  filter(Rd > 0.0)

#make Rd plot
Rd_plot <- Rd_clean %>%
  filter(!is.na(Rd)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd)%>%
  ggplot(., aes(x = timepoint, y = Rd, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("Respiration Rate (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); Rd_plot


#check for and remove GP outliers
GP_clean <- summary_fragments %>%
  filter(GP < 2.0)

GP_clean <- GP_clean %>%
  filter(GP > 0.3)

#make GP plot
GP_plot <- GP_clean %>%
  filter(!is.na(GP)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd, GP)%>%
  ggplot(., aes(x = timepoint, y = GP, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("Gross Photosynthetic Rate (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); GP_plot


#make GP:R plot
GP_R_plot <- summary_fragments %>%
  filter(!is.na(GP.R)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd, GP, GP.R)%>%
  ggplot(., aes(x = timepoint, y = GP.R, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("GP:R (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); GP_R_plot

```


Join all plots together.  

```{r}

all_resp_Figure<-plot_grid(NP_plot, Rd_plot, GP_plot, GP_R_plot, ncol=2, nrow=2, labels = c('A', 'B', 'C', 'D'),rel_heights= c(1,1,1,1), rel_widths = c(1,1,1,1), label_y=1, align="h", label_size = 30)

ggsave(filename="timeseries_analysis/Figures/all_resp_figure.pdf", plot=all_resp_Figure, dpi=500, width=30, height=30, units="in")
ggsave(filename="timeseries_analysis/Figures/all_resp_figure.png", plot=all_resp_Figure, dpi=500, width=30, height=30, units="in")
```

```{r}

NP_Rd <-plot_grid(NP_plot, Rd_plot, ncol=2, nrow=1, labels = c('A', 'B'), label_size = 50)

ggsave(filename="timeseries_analysis/Figures/NP_Rd_Figure.png", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
ggsave(filename="timeseries_analysis/Figures/NP_Rd_Figure.pdf", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
```

### Analysis of NP   

Build a mixed model for univariate analysis and examine data distribution. 

`P_model<-lmer(P~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)` 

```{r}
P_model<-lmer(P~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)
qqPlot(residuals(P_model))
```

Residuals are not normally distributed. Attempt with log transformation.      

`P_model<-lmer(log(P~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))` 

```{r}
P_model<-lmer(log(P~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))
qqPlot(residuals(P_model))
```

Generate a Type III Anova of model.    

```{r}
anova(P_model, type="III")
summary(P_model)
```

Timepoint x treatment is significant and main effect of timepoint

Type III Analysis of Variance Table with Satterthwaite's method
                     Sum Sq  Mean Sq NumDF  DenDF F value   Pr(>F)   
timepoint           0.60076 0.150191     4 94.067  4.0892 0.004232 **
Treatment           0.00299 0.002994     1 35.419  0.0815 0.776910   
timepoint:Treatment 0.44468 0.148226     3 88.623  4.0357 0.009696 **

### Analysis of Rd   

Build a mixed model for univariate analysis and examine data distribution. 

`Rd_model<-lmer(Rd~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)` 

```{r}
rd_model<-lmer(Rd~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)
qqPlot(residuals(rd_model))
```

Residuals are not normally distributed. Attempt with log transformation.      

`rd_model<-lmer(log(Rd~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))` 

```{r}
rd_model<-lmer(log(Rd~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))
qqPlot(residuals(rd_model))
```

Generate a Type III Anova of model.    

```{r}
anova(rd_model, type="III")
summary(rd_model)
```

Main effect of timepoint is significant:

Type III Analysis of Variance Table with Satterthwaite's method
                     Sum Sq Mean Sq NumDF DenDF F value  Pr(>F)   
timepoint           0.88435 0.22109     4   111  3.7734 0.00646 **
Treatment           0.12358 0.12358     1   111  2.1092 0.14924   
timepoint:Treatment 0.35109 0.11703     3   111  1.9974 0.11852


### Analysis of GP

Build a mixed model for univariate analysis and examine data distribution. 

`GP_model<-lmer(GP~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)` 

```{r}
GP_model<-lmer(GP~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)
qqPlot(residuals(GP_model))
```

Residuals are not normally distributed. Attempt with log transformation.      

`rd_model<-lmer(log(Rd~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))` 

```{r}
GP_model<-lmer(log(GP~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments))
qqPlot(residuals(GP_model))
```


Generate a Type III Anova of model.    

```{r}
anova(GP_model, type="III")
summary(GP_model)
```

Type III Analysis of Variance Table with Satterthwaite's method
                     Sum Sq Mean Sq NumDF DenDF F value  Pr(>F)  
timepoint           2.04112 0.51028     4   111  3.3810 0.01190 *
Treatment           0.17404 0.17404     1   111  1.1532 0.28522  
timepoint:Treatment 1.50219 0.50073     3   111  3.3178 0.02255 *

### Analysis of GP:R  

Build a mixed model for univariate analysis and examine data distribution. 

`GP.R_model<-lmer(GP.R~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)` 

```{r}
GP.R_model<-lmer(GP.R~timepoint*Treatment+(1|tank_num), na.action=na.omit, data=summary_fragments)
qqPlot(residuals(GP.R_model))
```

#residuals are normal move ahead

Generate a Type III Anova of model.    

```{r}
anova(GP.R_model, type="II")
summary(GP.R_mode)
```

 
Type II Analysis of Variance Table with Satterthwaite's method
                     Sum Sq Mean Sq NumDF  DenDF F value    Pr(>F)    
timepoint           1.97312 0.49328     4 94.339  6.5534 0.0001068 ***
Treatment           0.37191 0.37191     1 42.678  4.9409 0.0315780 *  
timepoint:Treatment 0.17285 0.05762     3 88.459  0.7655 0.5163939    



