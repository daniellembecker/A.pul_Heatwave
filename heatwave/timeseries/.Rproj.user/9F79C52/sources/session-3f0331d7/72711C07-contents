---
title: "Integrating Heatwave time series biological data"
author: "Ariana S Huffmyer, E5 RoL Team"
edited by: "DM Becker-Polinski"
date: "20220830"
output: html_document
editor_options: 
  chunk_output_type: console
--- 
NOTE: If you want to run this script, do not Knit, instead "run all chunks below" and look at console output.

## Script to run all physiological and biological data used for the heatwave timeseries. https://github.com/daniellembecker/Gametogenesis/tree/main/heatwave/timeseries
 
# Set Up    
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
```

```{r}
## install packages if you dont already have them
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("RColorBrewer")) install.packages("RColorBrewer")
if (!require("lme4")) install.packages("lme4")
if (!require("lmerTest")) install.packages("lmerTest")
if (!require("car")) install.packages("car")
if (!require("effects")) install.packages("effects")
if (!require("ggfortify")) install.packages("ggfortify")
if (!require("cowplot")) install.packages("cowplot")
if (!require("vegan")) install.packages("vegan")
if (!require("corrr")) install.packages("corrr")
if (!require("ggcorrplot")) install.packages("ggcorrplot")
if (!require("GGally")) install.packages("GGally")
if (!require("broom")) install.packages("broom")
if (!require("cowplot")) install.packages("cowplot")

# load packages
library(tidyverse)
library(ggplot2)
library(RColorBrewer)
library(lme4)
library(lmerTest)
library(car)
library(effects)
library(ggfortify)
library(cowplot)
library(vegan)
library(corrr)
library(ggcorrplot)
library(GGally)
library(broom)
library(patchwork)
library(cowplot)

```
 
# Load and manipulate data for photosynthesis and respiration measurements from heatwave

## Loading data files for PR rates   

Load all .csv files from output of all timepoints for each biological response     
 
```{r}
PR_files <- list.files("../", pattern = "PR_rates.csv", recursive=T, full.names=T)

```
 
## Read data files 
 
Load all data frames.  

```{r}
#PR rates
PR_dataset <- data.frame() #make dataframe
PR_dataset <- PR_dataset[-c(1)] #remove first X column

for (i in 1:length(PR_files)){
  PR_df <- read.csv(PR_files[i]) #each file will be read in
  PR_dataset <- rbind(PR_dataset, PR_df) #for each iteration, bind the new data to the building dataset
}

#provide context for Rd and P responses by light levels in data 
PR_dataset <- PR_dataset %>% 
  mutate(Assay = case_when(
    Light_Value == "0" ~ "Rd",
    Light_Value == "655" ~ "P",
    Light_Value == "657" ~ "P",
    Light_Value == "610" ~ "P",
    Light_Value == "625" ~ "P",
    Light_Value == "615" ~ "P",
    Light_Value == "656" ~ "P",
    Light_Value == "643" ~ "P",
    Light_Value == "651" ~ "P",
    Light_Value == "641" ~ "P",
    Light_Value == "649" ~ "P", 
    Light_Value == "654" ~ "P",
    Light_Value == "655" ~ "P",
    Light_Value == "621" ~ "P",
    Light_Value == "614" ~ "P",
    Light_Value == "630" ~ "P",
    Light_Value == "654" ~ "P", 
    Light_Value == "645" ~ "P",
    Light_Value == "650" ~ "P",
    Light_Value == "657" ~ "P",
    Light_Value == "658" ~ "P",
    Light_Value == "631" ~ "P",
    Light_Value == "649" ~ "P",
    Light_Value == "655" ~ "P"))

```

```{r}
#remove files that are not needed from loops
rm(list = ls(pattern = "*_df"))
```

## Generate master data frame    

Read in tag metadata frame. 
```{r}
#Load tag metadata sheet 
tags<-read.csv("../fragment_ metadata.csv")
```


### Plot: Photosynthesis  

View by site and timepoint for each species.    
```{r}

test <- PR_dataset %>%
  pivot_wider(names_from = Assay, values_from = micromol.cm2.h)

#test <- test[-c(1)] #remove first X column

#Summarize all response values by group (fragment ID + timepoint + Treatment).
summary_fragments <- group_by(test, fragment_ID, timepoint, Treatment) %>%
  summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
  drop_na("timepoint")%>%
  write_csv(., "Output/summary_respo_fragment_ID.csv")

#make respiration positive 
summary_fragments$Rd <- -summary_fragments$Rd

#make new column for gross photosynthesis and add net photosynthesis (the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration) + the absolute value of Rd for gross photosynthesis - the total rate of carbon fixation (reduction of CO2) without considering that some of the CO2 is lost in respiration
summary_fragments$GP <- summary_fragments$P + summary_fragments$Rd

#Calculate a P:R ratio = gross photosynthesis / respiration and make new column. A 1:1 ratio indicates that photosynthesis meets respiratory demand.    
summary_fragments$GP.R <- abs(summary_fragments$GP)/abs(summary_fragments$Rd)
#calculate ratio with absolute values
#remove outliers detected by values of P:R ratio data

complete_sum<-summary_fragments%>%
  group_by(Treatment, timepoint)%>%
  summarise(across(.cols=everything(), ~mean(.x, na.rm = TRUE)))%>%
  drop_na("timepoint")%>%
  write_csv(., "Output/summary_respo_timepoint.csv")


#View boxplots for each metric. Check for outliers.   
boxplot(summary_fragments$Rd)
summary_fragments<-summary_fragments%>%filter(Rd < 2.3) #filter out outlier for Rd 
boxplot(summary_fragments$P)
boxplot(summary_fragments$GP)
boxplot(summary_fragments$GP.R)


NP_plot <- summary_fragments %>%
  filter(!is.na(P)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd) %>%
  ggplot(., aes(x = timepoint, y = P, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
ylab(expression(bold(paste("Net P (" *mu*"mol ", O[2] ," " *cm^-2 *hr^-1*")"))))+
scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); NP_plot


Rd_plot <- summary_fragments %>%
  filter(!is.na(Rd)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd)%>%
  ggplot(., aes(x = timepoint, y = Rd, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("Respiration Rate (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=40),
      legend.text=element_text(size=40),
      axis.title=element_text(face="bold", size=40),
      axis.text=element_text(size=40, color="black"), 
      strip.text.x=element_text(face="italic", size=40)
      ); Rd_plot



GP_plot <- summary_fragments %>%
  filter(!is.na(GP)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd, GP)%>%
  ggplot(., aes(x = timepoint, y = GP, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("Gross Photosynthetic Rate (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=30),
      legend.text=element_text(size=30),
      axis.title=element_text(face="bold", size=30),
      axis.text=element_text(size=30, color="black"), 
      strip.text.x=element_text(face="italic", size=30)
      ); GP_plot


GP_R_plot <- summary_fragments %>%
  filter(!is.na(GP.R)) %>%
  filter(!is.na(timepoint)) %>%
  select(fragment_ID, timepoint, Treatment, P, Rd, GP, GP.R)%>%
  ggplot(., aes(x = timepoint, y = GP.R, fill = Treatment)) +
    geom_boxplot(outlier.size = 0) +
    geom_point(pch = 21, size=2, position = position_jitterdodge(0.2)) + 
    xlab("Timepoint") + 
    ylab(expression(bold(paste("GP:R (" *mu*"mol ", O[2] ," " *hr^-2 *s^-1*")"))))+
   scale_fill_manual(values = c("blue", "red", "gray")) + #change gradient color 
  theme_classic() + 
    theme(
      legend.position="right",
      legend.title=element_text(face="bold", size=22),
      legend.text=element_text(size=18),
      axis.title=element_text(face="bold", size=22),
      axis.text=element_text(size=16, color="black"), 
      strip.text.x=element_text(face="italic", size=18)
      ); GP_R_plot

```


Join all plots together.  

```{r}

all_resp_Figure<-plot_grid(NP_plot, Rd_plot, GP_plot, GP_R_plot, ncol=4, nrow=1, labels = c('A', 'B', 'C', 'D'),rel_heights= c(1,1,1,1), rel_widths = c(1,1,1,1.2), label_y=1, align="h", label_size = 22)

ggsave(filename="Figures/all_resp_figure.pdf", plot=all_resp_Figure, dpi=500, width=25, height=10, units="in")
ggsave(filename="Figures/all_resp_figure.png", plot=all_resp_Figure, dpi=500, width=25, height=10, units="in")
```

```{r}

NP_Rd <-plot_grid(NP_plot, Rd_plot, ncol=2, nrow=1, labels = c('A', 'B'), label_size = 50)

ggsave(filename="Figures/NP_Rd_Figure.png", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
ggsave(filename="Figures/NP_Rd_Figure.pdf", plot=NP_Rd, dpi=500, width=35, height=20, units="in")
```

### Analysis of P   

Build a mixed model for univariate analysis and examine data distribution. 

`P_model<-lmer(P~timepoint*Treatment+(1|tank.num), na.action=na.omit, data=master)` 

```{r}
P_model<-lmer(P~timepoint*Treatment+(1|tank.num), na.action=na.omit, data=summary_fragments)
qqPlot(residuals(P_model))
```

Residuals are not normally distributed. Attempt with log transformation.      

`P_model<-lmer(log(P)~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)` 

```{r}
P_model<-lmer(log(P)~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)
qqPlot(residuals(P_model))
```

Generate a Type II Anova of model.    

```{r}
anova(P_model, type="II")
summary(P_model)
```


`P_model_poc<-lmer(log(P)~timepoint*site+(1|tank.num), na.action=na.omit, data=master, subset=c(species=="Pocillopora"))` 

```{r}
P_model_poc<-lmer(log(P)~timepoint*site+(1|tank.num), na.action=na.omit, data=master, subset=c(species=="Pocillopora"))
qqPlot(residuals(P_model_poc))
```

Generate a Type III Anova of model.    

```{r}
anova(P_model_poc, type="III")
summary(P_model_poc)
```


### Analysis of Rd   

Build a mixed model for univariate analysis and examine data distribution. 

`rd_model<-lmer(Rd~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)` 

```{r}
rd_model<-lmer(Rd~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)
qqPlot(residuals(rd_model))
```

Residuals are not normally distributed. Attempt with log transformation.      

`rd_model<-lmer(log(Rd)~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)` 

```{r}
rd_model<-lmer(log(Rd)~timepoint*species*site+(1|tank.num), na.action=na.omit, data=master)
qqPlot(residuals(rd_model))
```

Generate a Type II Anova of model.    

```{r}
anova(rd_model, type="III")
summary(rd_model)
```


`rd_model_acr<-lmer(log(Rd)~timepoint*site+(1|tank.num), na.action=na.omit, data=master, subset=c(species=="Acropora"))` 

```{r}
rd_model_acr<-lmer(log(Rd)~timepoint*site+(1|tank.num), na.action=na.omit, data=master, subset=c(species=="Acropora"))
qqPlot(residuals(rd_model_acr))
```

Generate a Type II Anova of model.    

```{r}
anova(rd_model_acr, type="III")
summary(rd_model_acr)
```


