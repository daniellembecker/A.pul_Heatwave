---
title: Respirometry Extraction with LoLinR
author: "AS Huffmyer"
edited by: "DM Becker-Polinski"
date: '20230717'
output:
  html_document:
    code_folding: hide
    toc: yes
    toc_depth: 6
    toc_float: yes
  pdf_document:
    keep_tex: yes
editor_options: 
  chunk_output_type: console
---

## Goal is to calculate larval respiration rates for heatwave, ambient, and wildtype **Acropora pulchra** colony cohorts that spawned over different dates. After each release date cohort, the larval respiration was measured 7 days after on fully formed larvae at the temperatures of 26C and 30C.

## Setup  

Set up workspace, set options, and load required packages.    
```{r}
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
```

```{r, warning=FALSE, message=FALSE}
## install packages if you dont already have them in your library
if ("devtools" %in% rownames(installed.packages()) == 'FALSE') install.packages('devtools') 
library(devtools)
if ("segmented" %in% rownames(installed.packages()) == 'FALSE') install.packages('segmented') 
if ("plotrix" %in% rownames(installed.packages()) == 'FALSE') install.packages('plotrix') 
if ("gridExtra" %in% rownames(installed.packages()) == 'FALSE') install.packages('gridExtra') 
if ("LoLinR" %in% rownames(installed.packages()) == 'FALSE') install_github('colin-olito/LoLinR') 
if ("lubridate" %in% rownames(installed.packages()) == 'FALSE') install.packages('lubridate') 
if ("chron" %in% rownames(installed.packages()) == 'FALSE') install.packages('chron') 
if ("plyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('plyr') 
if ("dplyr" %in% rownames(installed.packages()) == 'FALSE') install.packages('dplyr') 
if ("stringr" %in% rownames(installed.packages()) == 'FALSE') install.packages('stringr') 
if ("Rmisc" %in% rownames(installed.packages()) == 'FALSE') install.packages('Rmisc') 
if ("respR" %in% rownames(installed.packages()) == 'FALSE') install.packages('respR') 


#load packages
library("ggplot2")
library("segmented")
library("plotrix")
library("gridExtra")
library("LoLinR")
library("lubridate")
library("chron")
library('plyr')
library('dplyr')
library('stringr')
library('Rmisc')
library('respR')

```

## Read in files  

Set the path of all respirometry files within the R project.   

```{r, warning=FALSE, message=FALSE}
path.p<-"data/respirometry/runs" #location of files
```

Bring in the file names.
```{r, warning=FALSE, message=FALSE}
# bring in the respiration file names
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) 
#file.names<-"20221026_SDR710_Run06_Oxygen.csv"
```

## Respiration rates  

Generate respiration data frames.

```{r, warning=FALSE, message=FALSE}
#generate a 6 column dataframe with specific column names
#respiration
Resp.R <- data.frame(matrix(NA, ncol=6))
colnames(Resp.R) <- c("Date", "Run","Sample.ID","Chamber.ID","Intercept", "umol.L.min")

Resp.Rb <- data.frame(matrix(NA, ncol=6))
colnames(Resp.Rb) <- c("Date", "Run","Sample.ID","Chamber.ID","Intercept", "umol.L.min")

```

Load in the sample information file. It is important to have chambers in the order "A1, B1, C1, D1", rather than "A1, A2, A3, A4". 
```{r, warning=FALSE, message=FALSE}
Sample.Info<-read.csv("data/respirometry/Resp_Sample_Info.csv") #information on life stage, number of individuals, runs, etc.
rename <- Sample.Info$Chamber.ID
samp <- Sample.Info$Sample.ID
run <- str_sub(file.names, 20, 24) #grab run from file name
date <- str_sub(file.names, 4, str_length(file.names)-24) #grab date from file name

#load in respiration start times as a list the same length as the number of files
starttimes<-read.csv("data/respirometry/starttimes.csv") #read in file of starting R and P phase times
rtime<-starttimes$Rtime #list respiration start times. For respiration measurements, filter as > than this time
```

Make a folder for output files. 
```{r}
# Check if the folder exists
if (!file.exists("output/RespirationPlots")) {
  # Create the new folder
  dir.create("output/RespirationPlots")
  cat("New folder 'RespirationPlots' created at path 'output/RespirationPlots'.\n")
} else {
  cat("The folder 'RespirationPlots' already exists at path 'output/RespirationPlots'.\n")
}
```

Run loop to extract slopes from respiration data. Subset for respiration data as >4 minutes. Convert %air sat to umol/L during extraction. 

```{r, results=FALSE, warning=FALSE, message=FALSE}
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
  Resp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
  
  #remove NA rows reading in as blank rows in data frame by removing rows with NA in a data column
  Resp.Data<-Resp.Data%>%
    filter(!is.na(A1))
  
  Resp.Data$Temp <- Resp.Data[,31] #assigns temp column
  Resp.Data$Time.Min <- seq.int(from=0, to=((nrow(Resp.Data)*0.25)-0.25), by = 0.25) #set time in min

  #remove first 4 min of each run 
  Resp.Data <- Resp.Data %>% #filters data by phase (respiration only)
    filter(Time.Min > 4)
  
  Resp.Data.N <- Resp.Data[,3:26]   #subset desired columns 

 #convert to umol/L using the respR package 
 Resp.Data.DO <- as.matrix(Resp.Data.N)
 Resp.Data.DO <- respR::convert_DO(Resp.Data.DO, from = "%Air", to = "umol/L", t = Resp.Data$Temp, S = 36)
  
  #add column names back in 
  Resp.Data.DO<-as.data.frame(Resp.Data.DO)
  
  for(j in 1:(ncol(Resp.Data.DO))){
    model <- rankLocReg(
      xall=Resp.Data$Time.Min, yall=as.numeric(Resp.Data.DO[, j]), 
      alpha=0.4, method="pc", verbose=TRUE) #extract slopes, percentile rank method with minimum window size of 0.4. This means that in order to fit a slope, it has to encompass at least 40% of available datapoints. 
    
    pdf(paste0("output/RespirationPlots/",date[i], "_",run[i],"_",rename[j],"_regression_trunc.pdf")) #generate output file names
    plot(model)
    dev.off()
    
    Resp.Rb[j,1] <- as.character(date[i]) #stores the date
    Resp.Rb[j,2] <- as.character(run[i]) #stores the run number
    Resp.Rb[j,3] <- as.character(samp[j+(i-1)*ncol(Resp.Data.DO)]) #stores the sample ID
    Resp.Rb[j,4] <- as.character(rename[j]) #stores the chamber ID
    Resp.Rb[j,5:6] <- model$allRegs[i,c(4,5)] #inserts slope and intercept in the dataframe
    
  }
  Resp.R <- rbind(Resp.R, Resp.Rb) #bind final data frame
}

```

Calculate average temperature of each run and export to a table.  
```{r}
# list files 
file.names<-basename(list.files(path = path.p, pattern = "csv$", recursive = TRUE)) 
#file.names<-"20221026_SDR710_Run06_Oxygen.csv"

#generate matrix to populate
Temp.R <- data.frame(matrix(NA, ncol=3))
colnames(Temp.R) <- c("Date", "Run","Temp.C")

Temp.Rb <- data.frame(matrix(NA, ncol=3))
colnames(Temp.Rb) <- c("Date", "Run","Temp.C")

#read in temps and generate mean values  
for(i in 1:length(file.names)) { # for every file in list start at the first and run this following function
  Temp.Data <-read.table(file.path(path.p,file.names[i]), skip = 56, header=T, sep=",", na.string="NA", fill = TRUE, as.is=TRUE, fileEncoding="latin1") #reads in the data files
  
  #remove NA rows reading in as blank rows in data frame by removing rows with NA in a data column
  Temp.Data<-Temp.Data%>%
    filter(!is.na(A1))
  
  Temp.Data$Temp <- Temp.Data[,31] #assigns temp column
  
    Temp.Rb[j,1] <- as.character(date[i]) #stores the date
    Temp.Rb[j,2] <- as.character(run[i]) #stores the run number
    Temp.Rb[j,3] <- mean(Temp.Data$Temp) #stores the sample ID
    
    Temp.R <- rbind(Temp.R, Temp.Rb) #bind final data frame
    Temp.R <- na.omit(Temp.R)
  
}

write.csv(Temp.R, paste0("output/Resp_runs_temp.csv")) #save respiration rate data
```

Save respiration data frames.  

```{r, results=FALSE, warning=FALSE, message=FALSE}
Resp.R <- Resp.R[-1,] #remove empty column

write.csv(Resp.R, paste0("output/Respiration_rates.csv")) #save respiration rate data

plot(Resp.R$umol.L.min~as.factor(Resp.R$Run), side = 2, las = 2, xlab="" )

```

```{r, warning=FALSE, message=FALSE}
Resp.Rates <- read.csv(file = "output/Respiration_rates.csv") #read file back in so slopes don't have to be generated every time
Resp.Rates = subset(Resp.Rates, select = -c(X) ) #remove empty column

#format "run" column
Resp.Rates<-Resp.Rates %>%
  mutate(Run = str_sub(Run, 4, -1))
Resp.Rates$Run<-as.integer(Resp.Rates$Run) #format as # rather than run #, set as integer
```

## Standardize and normalize  

Merge R files with sample info for testing and manipulation.  

```{r, warning=FALSE, message=FALSE}
oxygen<-dplyr::full_join(Sample.Info, Resp.Rates) #add respiration data
colnames(oxygen)[colnames(oxygen) == 'Intercept'] <- 'Resp.Intercept' #rename to specify R
colnames(oxygen)[colnames(oxygen) == 'umol.L.min'] <- 'R.umol.L.min' #rename to specify R
```

Remove samples that have inaccurate slope extraction for respiration rates (determined by PDF output files)  
```{r}
#insert filter here if needed, check the PDF files 
```

Account for volume to obtain umol per minute.   

```{r, results=TRUE, warning=FALSE, message=FALSE}
#Account for chamber volume to convert from umol L-1 m-1 to umol m-1. This removes per Liter
oxygen$R.umol.min <- oxygen$R.umol.L.min * oxygen$Volume #calculate

plot(oxygen$Run, oxygen$R.umol.L.min, xlab="Run", ylab="rate") #resp rates

plot(oxygen$Run, oxygen$R.umol.min, xlab="Run", ylab="rate") #resp rates

```

Substract blank values. Average blank calculated for each run for P and R phases. Display mean blank value in order of R and P phases.  
```{r}
blank_data <- subset(oxygen, Type == "Blank") #subset to blank data only
plot(as.factor(blank_data$Run), blank_data$R.umol.min, xlab="Run", ylab="umol O2 min-1") #blanks during dark phase

#display mean blankvalues
mean(blank_data$R.umol.min, na.rm=TRUE) #mean R phase blanks

resp.blnk <- aggregate(R.umol.min ~ Date*Run, data=blank_data, mean) #calculate average blank during light for each run
colnames(resp.blnk)[colnames(resp.blnk) == 'R.umol.min'] <- 'R.Blank.umol.min' #rename to specify blank for R

oxygen <- full_join(oxygen, resp.blnk) #add R blanks to master
```

Subtract blank values to generate a "corrected" value for umol O2 min-1.  

```{r, warning=FALSE, message=FALSE}
oxygen$R.umol.min.corr<-oxygen$R.umol.min-oxygen$R.Blank.umol.min #subtract R blanks
```

```{r}
plot(oxygen$R.umol.min.corr)
```

Normalize to biologically relevant measure. Here, normalize to number of larvae. This can be substituted or changed for larval size/volume as well.  

```{r, warning=FALSE, message=FALSE}
oxygen.bio <- oxygen %>% filter(Type == "Sample") #isolate only biological samples and drop unused factor levels 
oxygen.bio <- droplevels(oxygen.bio) #drop unused factor levels

#respiration
oxygen.bio$R.umol.org.min <- oxygen.bio$R.umol.min.corr/oxygen.bio$Org.Number #calculate oxygen per organism 
oxygen.bio$R.nmol.org.min <- oxygen.bio$R.umol.org.min*1000 #calculate nanomoles 

```

Plot values 
```{r}
plot(oxygen.bio$R.nmol.org.min)
```

Save as .csv file.  
```{r, warning=FALSE, message=FALSE}
write.csv(oxygen.bio, paste0("output/oxygen_R_calc.csv")) #save final file
```


